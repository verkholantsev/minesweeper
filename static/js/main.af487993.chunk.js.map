{"version":3,"sources":["Square/Square.js","GameField/GameField.js","MinesLeftCount/MinesLeftCount.js","App/App.js","registerServiceWorker.js","index.js"],"names":["Square","props","hasFlag","hasMine","isOpened","nearestMinesCount","onClick","onContextMenu","className","concat","content","react_default","a","createElement","GameField","field","onSquareClick","onSquareRightClick","fieldContent","map","row","x","rowContent","square","y","key","src_Square_Square","Object","assign","event","preventDefault","MinesLeftCount","count","label","GameState","IN_PROGRESS","WIN","LOSE","generateField","width","height","minesCount","push","isVisitedTag","i","_generateMineCoords","generateMineCoords","getNearestMineCount","getNearestSquaresCoords","filter","_ref","fn","forEach","_ref2","traverseNearestSquares","Math","round","random","handleSquareClick","state","_field$x$y","objectSpread","openField","gameState","queue","Date","valueOf","length","shift","squaresToAddToQueue","_ref3","apply","toConsumableArray","closedCount","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","col","err","return","getClosedSquaresCount","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","closedSquaresCount","minesLeftCount","_this2","_renderGameState","src_GameField_GameField","data","_onSquareClick","_onSquareRightClick","_this$state","MinesLeftCount_MinesLeftCount","Error","_ref4","setState","_ref5","_this$state$field$x$y","_field$x$y2","handleSquareRightClick","Component","defaultProps","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.af487993.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Square.css';\n\nfunction Square(props) {\n    const {\n        hasFlag,\n        hasMine,\n        isOpened,\n        nearestMinesCount,\n        onClick,\n        onContextMenu,\n    } = props;\n\n    let className = 'Square';\n    if (isOpened) {\n        className = `${className} Square__opened Square__content_${nearestMinesCount}`;\n    }\n\n    let content = null;\n    if (!isOpened) {\n        content = hasFlag ? '⛳️' : '';\n    } else if (hasMine) {\n        content = '💣';\n    } else if (nearestMinesCount > 0) {\n        content = nearestMinesCount;\n    }\n\n    return (\n        <div\n            className={className}\n            onClick={onClick}\n            onContextMenu={onContextMenu}>\n            {content}\n        </div>\n    );\n}\n\nSquare.propTypes = {\n    hasFlag: PropTypes.bool,\n    hasMine: PropTypes.bool,\n    isOpened: PropTypes.bool,\n    nearestMinesCount: PropTypes.number,\n    onClick: PropTypes.func,\n    onContextMenu: PropTypes.func,\n};\n\nexport default Square;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Square from '../Square/Square';\nimport './GameField.css';\n\nfunction GameField(props) {\n    const {field, onSquareClick, onSquareRightClick} = props;\n\n    const fieldContent = field.map((row, x) => {\n        const rowContent = row.map((square, y) => {\n            const key = `${x}-${y}`;\n            return (\n                <Square\n                    {...square}\n                    key={key}\n                    onClick={() => onSquareClick({x, y})}\n                    onContextMenu={event => {\n                        event.preventDefault();\n                        onSquareRightClick({x, y});\n                    }}/>\n            );\n        });\n\n        return <div className='GameField__row' key={x}>{rowContent}</div>;\n    });\n\n    return (\n        <div className='GameField'>\n            {fieldContent}\n        </div>\n    );\n}\n\nGameField.propTypes = {\n    field: PropTypes.array,\n    onSquareClick: PropTypes.func,\n    onSquareRightClick: PropTypes.func,\n};\n\nexport default GameField;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MinesLeftCount.css';\n\nexport default function MinesLeftCount(props) {\n    const {count, className} = props;\n    const label = count === 1 ? 'mine left' : 'mines left';\n\n    return (\n        <div className={`MinesLeftCount ${className}`}>\n            {count} {label}\n        </div>\n    );\n}\n\nMinesLeftCount.propTypes = {\n    className: PropTypes.string,\n    count: PropTypes.number,\n};\n","import 'babel-polyfill';\n\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport GameField from '../GameField/GameField';\nimport MinesLeftCount from '../MinesLeftCount/MinesLeftCount';\n\nimport './App.css';\n\nconst GameState = {\n    IN_PROGRESS: 'IN_PROGRESS',\n    WIN: 'WIN',\n    LOSE: 'LOSE',\n};\n\nfunction generateField(width, height, minesCount) {\n    let field = [];\n\n    for (let x = 0; x < width; x++) {\n        field.push([]);\n\n        for (let y = 0; y < height; y++) {\n            field[x].push({\n                hasFlag: false,\n                hasMine: false,\n                isOpened: false,\n                isVisitedTag: null,\n                x,\n                y,\n            });\n        }\n    }\n\n    for (let i = 0; i < minesCount; i++) {\n        const {x, y} = generateMineCoords(field, width, height);\n        field[x][y].hasMine = true;\n    }\n\n    for (let x = 0; x < width; x++) {\n        for (let y = 0; y < height; y++) {\n            field[x][y].nearestMinesCount = getNearestMineCount(field, x, y);\n        }\n    }\n\n    return field;\n}\n\nfunction getNearestSquaresCoords(field, x, y) {\n    const nearestSquaresCoords = [\n        {x: x - 1, y       }, // N\n        {x: x - 1, y: y + 1}, // NE\n        {x,        y: y + 1}, // E\n        {x: x + 1, y: y + 1}, // SE\n        {x: x + 1, y       }, // S\n        {x: x + 1, y: y - 1}, // SW\n        {x,        y: y - 1}, // W\n        {x: x - 1, y: y - 1}, // NW\n    ];\n\n    return nearestSquaresCoords.filter(({x, y}) => {\n        const row = field[x];\n        if (!row) {\n            return false;\n        }\n        const square = row[y];\n        if (!square) {\n            return false;\n        }\n        return true;\n    });\n}\n\nfunction traverseNearestSquares(field, x, y, fn) {\n    const squaresToTraverse = getNearestSquaresCoords(field, x, y);\n\n    squaresToTraverse.forEach(({x, y}) => {\n        const square = field[x][y];\n        fn(square, x, y);\n    });\n}\n\nfunction getNearestMineCount(field, x, y) {\n    let count = 0;\n    traverseNearestSquares(field, x, y, field => {\n        if (field.hasMine) {\n            count++;\n        }\n    });\n\n    return count;\n}\n\nfunction generateMineCoords(field, width, height) {\n    const x = Math.round(Math.random() * (width - 1));\n    const y = Math.round(Math.random() * (height - 1));\n\n    if (field[x][y].hasMine === 1) {\n        return generateMineCoords(field, width, height);\n    }\n\n    return {x, y};\n}\n\nfunction handleSquareClick(state, x, y, minesCount) {\n    const {field} = state;\n    const {hasFlag, hasMine} = field[x][y];\n\n    if (hasFlag) {\n        return state;\n    } else if (hasMine) {\n        return {\n            ...state,\n            field: openField(field),\n            gameState: GameState.LOSE,\n        };\n    }\n\n    const queue = [field[x][y]];\n    const isVisitedTag = new Date().valueOf();\n\n    while (queue.length > 0) {\n        const square = queue.shift();\n        if (square.hasFlag) {\n            continue;\n        }\n\n        square.isOpened = true;\n\n        if (square.nearestMinesCount === 0 && !square.hasMine) {\n            const nearestSquaresCoords = getNearestSquaresCoords(field, square.x, square.y);\n            const squaresToAddToQueue = nearestSquaresCoords\n                .map(({x, y}) => field[x][y])\n                .filter(square => square.isVisitedTag !== isVisitedTag);\n\n            squaresToAddToQueue.forEach(square => {\n                square.isVisitedTag = isVisitedTag;\n            });\n\n            queue.push(...squaresToAddToQueue);\n        }\n    }\n\n    if (getClosedSquaresCount(field) === minesCount) {\n        return {\n            ...state,\n            field: openField(field),\n            gameState: GameState.WIN,\n        };\n    }\n\n    return {\n        ...state,\n        field,\n    };\n}\n\nfunction handleSquareRightClick(state, x, y) {\n    const {field, minesLeftCount} = state;\n    const {hasFlag, isOpened} = field[x][y];\n\n    if (isOpened || (minesLeftCount === 0 && !hasFlag)) {\n        return state;\n    }\n\n    field[x][y] = {...field[x][y], hasFlag: !hasFlag};\n\n    return {\n        ...state,\n        field,\n        minesLeftCount: hasFlag ? minesLeftCount + 1 : minesLeftCount - 1,\n    };\n}\n\nfunction openField(field) {\n    for (let x = 0; x < field.length; x++) {\n        for (let y = 0; y < field[x].length; y++) {\n            field[x][y] = {...field[x][y], isOpened: true};\n        }\n    }\n\n    return field;\n}\n\nfunction getClosedSquaresCount(field) {\n    let closedCount = 0;\n    for (let row of field) {\n        for (let col of row) {\n            if (!col.isOpened) {\n                closedCount++;\n            }\n        }\n    }\n    return closedCount;\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        const {\n            minesCount,\n            width,\n            height,\n        } = props;\n\n        this.state = {\n            closedSquaresCount: width * height,\n            field: generateField(width, height, minesCount),\n            gameState: GameState.IN_PROGRESS,\n            minesLeftCount: minesCount,\n        };\n    }\n\n    render() {\n        return (\n            <div className='App'>\n                {this._renderGameState()}\n                <div className='App__gameFieldWrapper'>\n                    <GameField\n                        field={this.state.field}\n                        onSquareClick={data => this._onSquareClick(data)}\n                        onSquareRightClick={data => this._onSquareRightClick(data)}/>\n                </div>\n            </div>\n        );\n    }\n\n    _renderGameState() {\n        const {gameState, minesLeftCount} = this.state;\n\n        switch (gameState) {\n        case GameState.IN_PROGRESS:\n            return <MinesLeftCount className='App__mineLeftCount' count={minesLeftCount}/>;\n        case GameState.WIN:\n            return <div className='App__mineLeftCount'>😎</div>;\n        case GameState.LOSE:\n            return <div className='App__mineLeftCount'>😫</div>;\n        default:\n            throw new Error(`Unexpected game state: ${gameState}`);\n        }\n    }\n\n    _onSquareClick({x, y}) {\n        const state = handleSquareClick(this.state, x, y, this.props.minesCount);\n        this.setState(() => state);\n    }\n\n    _onSquareRightClick({x, y}) {\n        const {isOpened, hasFlag} = this.state.field[x][y];\n        const {minesLeftCount} = this.state;\n        if (isOpened || (minesLeftCount === 0 && !hasFlag)) {\n            return;\n        }\n\n        const state = handleSquareRightClick(this.state, x, y);\n        this.setState(() => state);\n    }\n}\n\nApp.defaultProps = {\n    height: 10,\n    minesCount: 10,\n    width: 10,\n};\n\nApp.propTypes = {\n    height: PropTypes.number,\n    minesCount: PropTypes.number,\n    width: PropTypes.number,\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (!isLocalhost) {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            } else {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log('New content is available; please refresh.'); // eslint-disable-line no-console\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.'); // eslint-disable-line no-console\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error); // eslint-disable-line no-console\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log( // eslint-disable-line no-console\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}